trigger:
 branches:
   include:
     - main
 paths:
  exclude:
    - README.md
    

pool:
  name: 'Default'

variables:
  isMainBranch: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
  - stage: Build
    displayName: Build and Test
    jobs:
      - job:
        steps:

        - task: NuGetToolInstaller@1
          displayName: Install NuGet

        - task: NuGetCommand@2
          displayName: Restore Packages
          inputs:
            restoreSolution: '$(solution)'

        - task: VSBuild@1
          displayName: Build Solution
          inputs:
            solution: '$(solution)'
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'

        - task: DotNetCoreCLI@2
          displayName: Run Tests
          inputs:
            command: 'test'
            projects: '**/*Tests.csproj'
            testRunTitle: 'Test'

        - task: DotNetCoreCLI@2
          displayName: Create NuGet Package $(PackageVersion)
          inputs:
            outputDir: '$(Build.ArtifactStagingDirectory)/preview'
            command: 'pack'
            packagesToPack: '**/ThatBlokeCalledJay.MediatR.Abstractions.csproj'
            includesymbols: true
            versioningScheme: 'byPrereleaseNumber'
            majorVersion: "$(major)"
            minorVersion: "$(minor)"
            patchVersion: "$(patch)"

        - task: PublishBuildArtifacts@1
          displayName: Publish preview packages to artefacts
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/preview'
            artifactName: preview
            publishLocation: Container

  # - stage: PackageRevision
  #   displayName: Package Revision
  #   condition: and(succeeded(), eq(variables.isMainBranch, true))
  #   jobs:
  #     - deployment:
  #       environment: revision
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - task: DotNetCoreCLI@2
  #                 displayName: Create NuGet Package $(PackageVersion)
  #                 inputs:
  #                   command: 'pack'
  #                   packagesToPack: '**/ThatBlokeCalledJay.MediatR.Abstractions.csproj'
  #                   includesymbols: true
  #                   versioningScheme: 'byEnvVar'
  #                   versionEnvVar: 'PackageVersion'

# steps:
# - task: NuGetToolInstaller@1
#   displayName: Install NuGet

# - task: NuGetCommand@2
#   displayName: Restore Packages
#   inputs:
#     restoreSolution: '$(solution)'

# - task: VSBuild@1
#   displayName: Build Solution
#   inputs:
#     solution: '$(solution)'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

# - task: DotNetCoreCLI@2
#   displayName: Run Tests
#   inputs:
#     command: 'test'
#     projects: '**/*Tests.csproj'
#     testRunTitle: 'Test'

# - task: DotNetCoreCLI@2
#   displayName: Create NuGet Package $(PackageVersion)
#   inputs:
#     command: 'pack'
#     packagesToPack: '**/ThatBlokeCalledJay.MediatR.Abstractions.csproj'
#     includesymbols: true
#     versioningScheme: 'byEnvVar'
#     versionEnvVar: 'PackageVersion'

# - task: DotNetCoreCLI@2
#   displayName: Push NuGet Package
#   inputs:
#     command: 'push'
#     packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
#     nuGetFeedType: 'internal'
#     publishVstsFeed: '1a343071-4c92-42ed-8b42-1526a6b90483'

# - task: DotNetCoreCLI@2
#   displayName: Push NuGet Symbols
#   inputs:
#     command: 'push'
#     packagesToPush: '$(Build.ArtifactStagingDirectory)/*.snupkg'
#     nuGetFeedType: 'internal'
#     publishVstsFeed: '1a343071-4c92-42ed-8b42-1526a6b90483'
